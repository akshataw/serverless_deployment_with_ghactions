name: Deployment Workflow

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  deploy-staging:
    name: deploy-staging
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_STAGING }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY_STAGING }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
    
    defaults:
      run:
        shell: bash
    if: github.ref == 'refs/heads/develop'
    # if: contains(github.ref, 'develop')
    steps:
      - uses: actions/checkout@v1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
      
      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform
      
      - name: Terraform Format
        run: terraform fmt -check
      
      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color > tfplan.txt
        working-directory: ./terraform

      - name: Terraform Apply (staging)
        # if: endsWith(github.ref, '/develop') && github.event_name == 'push'
        if: endsWith(github.ref, '/develop') && github.event_name == 'push'
        run: terraform apply -auto-approve=true
        working-directory: ./terraform
      
      - name: Install the dependencies
        run: npm install
        working-directory: ./serverless
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_STAGING }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY_STAGING }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      # - name: Decrypt the secrets
      #   run: npx serverless decrypt --stage dev --password "sErVerlE$s(icd"
      #   working-directory: ./serverless
      
      # - name: Save the ARN
      #   run:  aws secretsmanager get-secret-value --secret-id teamplus-secret --output yaml > mydb.yml
      #   working-directory: ./serverless

      - name: Serverless Deploy (staging)
        # if: endsWith(github.ref, '/develop') && github.event_name == 'push'
        if: endsWith(github.ref, '/develop') && github.event_name == 'push'
        run: npx serverless deploy
        working-directory: ./serverless

      # - name: Install test dependencies
      #   run: npm install
      #   working-directory: ./tests
      
      # - name: Run tests
      #   # if: endsWith(github.ref, '/develop') && github.event_name == 'push'
      #   if: endsWith(github.ref, '/develop') && github.event_name == 'push'
      #   run: npm test
      #   working-directory: ./tests
      
      - name: comment about terraform
        uses: machine-learning-apps/pr-comment@master
        if: github.event_name == 'pull_request'
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          path: ./terraform/tfplan.txt
          # path: ./serverless/RDS/tfplan.txt
  
  production-deploy:
    name: production-deploy
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_PROD }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY_PROD }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
    
    defaults:
      run:
        shell: bash
    if: github.ref == 'refs/heads/main'
    # if: contains(github.ref, 'refs/heads/main')
    steps:
      - uses: actions/checkout@v1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
      
      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform
      
      - name: Terraform Format
        run: terraform fmt -check
      
      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color > tfplan.txt
        working-directory: ./terraform
      
      - name: Terraform Apply (production)
        if: github.event_name == 'push'
        run: terraform apply -auto-approve=true
        working-directory: ./terraform
      
      - name: Install the dependencies
        run: npm install
        working-directory: ./serverless
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY_PROD }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      # - name: Decrypt the secrets
      #   run: npx serverless decrypt --stage dev --password "sErVerlE$s(icd"
      #   working-directory: ./serverless
      
      # - name: Save the ARN
      #   run:  aws secretsmanager get-secret-value --secret-id teamplus-secret --output yaml > mydb.yml
      #   working-directory: ./serverless
      
      - name: Serverless Deploy (production)
        if: github.event_name == 'push'
        run: npx serverless deploy
        working-directory: ./serverless

      # - name: Install test dependencies
      #   run: npm install
      #   working-directory: ./tests
      
      # - name: Run tests
      #   if: github.event_name == 'push'
      #   run: npm test
      #   working-directory: ./tests
      
      - name: comment about terraform
        uses: machine-learning-apps/pr-comment@master
        if: github.event_name == 'pull_request'
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          path: ./terraform/tfplan.txt
          # path: ./serverless/RDS/tfplan.txt